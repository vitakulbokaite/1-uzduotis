
#include <iostream>
#include <string>
#include <limits>
#include <algorithm>
#include <vector>
#include <iomanip>
#include <ios>
#include <random>
#include <ctime>
#include <fstream>
#include <chrono>

#include "Zmogus.h"
#include "Studentas.h"

using namespace std;

void rusiavimas(std::vector<Studentas*> s);
void isvedimas_i_faila(std::string filename, std::vector<Studentas*> stud);

int main()
{
	ifstream is("testas10000.txt"); 
	char line[400];
	is.getline(line, 400);
	const int count = 10000;
	vector<Studentas*> studs;
	for (int i = 0; i < count; i++)
		studs.push_back(new Studentas(is));

    rusiavimas(studs);

}

void rusiavimas(std::vector<Studentas*> s) {
    auto start = std::chrono::high_resolution_clock::now();
    auto st = start;
    std::vector<Studentas*> vargsiukai;
    std::vector<Studentas*> galvociai;
    for (int i = 0; i < s.size(); i++) {
        if (s[i]->gal() > 5) {
            galvociai.push_back(s[i]);
        }
        else {
            vargsiukai.push_back(s[i]);
        }
    }
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> diff = end - start; // Skirtumas (s)
    std::cout << "Failo rusiavimas uztruko: " << diff.count() << " s\n";
    start = std::chrono::high_resolution_clock::now();
    st = start;
    isvedimas_i_faila("vargsiukai.txt", vargsiukai);
    isvedimas_i_faila("galvociai.txt", galvociai);
    end = std::chrono::high_resolution_clock::now();
    diff = end - start; // Skirtumas (s)
    std::cout << "Surusiuotu failu isvedimas uztruko: " << diff.count() << " s\n\n";
}

void isvedimas_i_faila(std::string filename, std::vector<Studentas*> stud) {
    std::ofstream f(filename);
    f << std::left << std::setw(15) << "Pavarde" << std::left << std::setw(15) << "Vardas" << std::left << std::setw(20) << "Galutinis (vid.)" << std::endl;
    for (int i = 0;i < 70;i++) f << "-";
    f << std::endl;
    for (int a = 0; a < stud.size(); a++)
        f << std::left << std::setw(15) << stud[a]->getPavarde() << std::left << std::setw(15) << stud[a]->getVardas() << std::left << std::setw(20) << stud[a]->gal() << std::endl;
    for (int i = 0;i < 70;i++) f << "-";
    f << std::endl;
}
